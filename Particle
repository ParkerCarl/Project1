import java.awt.Color;
import java.awt.Graphics;

/**
 * Representation of a point mass moving in two dimensional space.
 * A particle has a location (a point), velocity (a vector), a mass (double)
 * and a color.  The mass and color never change.
 */
public class Particle {
	volatile Point _position; // must be "volatile" because of animation (not for other fields)
	// TODO: more fields.
	Vector _velocity;
	final double _mass;
	final Color _color;
	
	
	/**
	 * Create a new particle with the given position, velocity, mass and color
	 * @param p position (location) of particle initially
	 * @param v velocity of particle initially
	 * @param m mass of particle
	 * @param c color of particle
	 */
	public Particle(Point p, Vector v, double m, Color c) {
		// TODO
		this._position = p;
		this._velocity = v; 
		this._mass = m;
		this._color = c;
	}
	
	public Point getPosition() {
		// TODO
		return this._position;
	}
	
	public Vector getVelocity() {
		// TODO
		return this._velocity;
	}
	
	/**
	 * Estimate the location of the particle after one unit of time by 
	 * letting it move at a constant velocity for that time from its starting
	 * position.  Essentially that simply means we apply the velocity as a vector
	 * to the particles current position.
	 */
	public void move() {
		// TODO
		
		_position = _velocity.move(_position);
		
		
		
		
	}
	
	/**
	 * Draw the particle at its current position as a small circle.  The area of the circle
	 * is proportional to the mass: the radius of the circle is the square root of the mass.  
	 * @param g graphics context (must not be null)
	 */
	public void draw(Graphics g) {
		// TODO
		int radius = (int)Math.sqrt(this._mass);
		
		int xCord = (int)_position.x();
		int yCord = (int)_position.y();
		
		g.fillOval((xCord - radius) , (yCord - radius) , (radius * 2) , (radius * 2));
		
		
	}

	private static final double G = 1;

	/**
	 * Compute the Newtonian gravitational force that this particle exerts on the other.
	 * This force is proportional to the product of the masses and inversely proportional
	 * to the distance between them.  The constant of proportionality is given by {@link G}
	 * that is fixed at 1.0 for CS 351 purposes.  The direction of the force is toward this particle.
	 * @param other particle to operate gravitation on, must not be null
	 * @return force of gravitation toward this particle
	 */
	public Vector gravForceOn(Particle other) {
		// TODO;
		double m1 = this._mass;
		double m2 = other._mass;
		
		double d = Math.pow((other._position.distance(this._position)) , 2);
		
		//double gForce = ((G * m1 * m2)/(Math.pow(d, 2)));   this ended up not working when I thought it would
		
		Vector v21 = new Vector(other._position, this._position);
		
		Vector u21 = v21.normalize().scale((G * m1 * m2)/(d));
		
		//Vector u21 = new Vector((v21.dx() * gForce) , (v21.dy() * gForce) );  this ended up not being what i 
		//needed because it used x()/y() and dx()/dy()
		
		return u21;	
	}
	
	/**
	 * Apply a force as an acceleration on the velocity (after dividing by the mass).
	 * This velocity is affected as though one applied the constant acceleration for one time unit.
	 * @param force force applied, must not be null
	 */
	public void applyForce(Vector force) {
		// TODO
		_velocity = getVelocity().add(force.scale(1/_mass));
	}
}
